<?php/* --------------------------------------------------------------------------pici-server of the artproject picidae http://www.picidae.netCopyright (c) 2007  picidae.net by christoph wachter and mathias judThis program is free software; you can redistribute it and/ormodify it under the terms of the GNU General Public Licenseas published by the Free Software Foundation; either version 2of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program; if not, write to the Free SoftwareFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA. -------------------------------------------------------------------------- */// ----------------------------------------------------------// set local timezone (patch by jeremie78)// ----------------------------------------------------------if(function_exists('date_default_timezone_set'))	date_default_timezone_set(date_default_timezone_get());	// ----------------------------------------------------------// encode strings and decode strings// ----------------------------------------------------------function pici_decrypt ($key, $str){	global $debug;		$str1 = base64_decode($str);	if ($str1 =='') 	{		$str2 = '';	}	elseif (function_exists ('mdecrypt_generic')) 	{		$td = mcrypt_module_open('des', '', 'ecb', '');		$iv_size = mcrypt_enc_get_iv_size($td);		$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);		mcrypt_generic_init($td, $key, $iv);		$str2 = trim(mdecrypt_generic($td, $str1));		mcrypt_generic_deinit($td);		if ($debug) echo  ("decrypted with mcrypt: $str2 <br/>\n"); 			}	else	{		$str2 = des ($key,$str1,0,0,null);				if ($debug) echo  ("decrypted with des.php: $str2 <br/>\n"); 	}		return $str2;}// calculates the current mysql timestamp// the difference of the timestamp can be set in seconds// 3600 means 1 hour (3600 seconds) in the past.function get_mysql_timestamp ($diff){	// YYYYmmddhhmmss	$timestamp = date ("YmdHis") - $diff;		return $timestamp;}function get_timestamp_seconds ($diff){	// returns a float in seconds	$timestamp = microtime (true) - $diff;		return $timestamp;}function get_key ($bytes){	//$key = "8bytekey";	//$key = "this is a 24 byte key !!";		$key = substr (md5(time()), $bytes *-1);		return $key;}// ----------------------------------------------------------// Input: parse and protect// Output: parse and deprotect ;-)// ----------------------------------------------------------//parser funktionenfunction Veraendern($string){	//html-tags entfernen	$string1=strip_tags($string);		//html-sonderzeichen einfügen	$string2=htmlentities($string1);		//<br> tags einfügen	$string3=nl2br($string2);	//steuerungszeichen entfernen	$trans = array("\n" => "", "\r" => "", "\t" => "", "\v" => "", "\0" => "", "[" => "(", "]" => ")");	$string4 = strtr($string3, $trans);		return $string4;}function Schuetzen($string){	//eingabe maskieren	$string1=addslashes($string);		return $string1;}function DemaskString($string){	return stripslashes($string);}function MaskString_and($string){	// für das XML muss das "&" durch "&amp;" ersetzt werden	$trans = array("&" => "&amp;");	$string = strtr($string, $trans);	return $string;}// ----------------------------------------------------------// Display Errormessages// ----------------------------------------------------------//display error messagesfunction DisplayErrMsg($message){	printf("%s\n", $message);	}	?>