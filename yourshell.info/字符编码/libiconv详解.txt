libiconv详解
iconv命令可以将一种已知的字符集文件转换成另一种已知的字符集文件。

　　例如：从GB2312转换为UTF-8。
　　用法： iconv [选项...] [文件...]
　　Convert encoding of given files from one encoding to another.
　　输入/输出格式规范：
　　-f, --from-code=NAME 原始文本编码
　　-t, --to-code=NAME 输出编码
　　信息：
　　-l, --list 列举所有已知的字符集
　　输出控制：
　　-c 从输出中忽略无效的字符
　　-o, --output=FILE 输出文件
　　-s, --silent suppress warnings
　　--verbose 打印进度信息
　　-?, --help 给出该系统求助列表
　　--usage 给出简要的用法信息
　　-V, --version 打印程序版本号
　　Mandatory or optional arguments to long options are also mandatory or optional
　　for any corresponding short options.
　　用“glibcbug”脚本将错误报告给 <bugs@gnu.org>。
　　类似命令: piconv , convmv
　　piconv是流模式的,处理超大文件比较方便. convmv是给文件名重命名的,windows和linux系统间切换后尤其有用
　　所有已知的字符集：
　　437, 500, 500V1, 850, 851, 852, 855, 856, 857, 860, 861, 862, 863, 864, 865,
　　866, 866NAV, 869, 874, 904, 1026, 1046, 1047, 8859_1, 8859_2, 8859_3, 8859_4,
　　8859_5, 8859_6, 8859_7, 8859_8, 8859_9, 10646-1:1993, 10646-1:1993/UCS4,
　　ANSI_X3.4-1968, ANSI_X3.4-1986, ANSI_X3.4, ANSI_X3.110-1983, ANSI_X3.110,
　　ARABIC, ARABIC7, ARMSCII-8, ASCII, ASMO-708, ASMO_449, BALTIC, BIG-5,
　　BIG-FIVE, BIG5-HKSCS, BIG5, BIG5HKSCS, BIGFIVE, BS_4730, CA, CN-BIG5, CN-GB,
　　CN, CP-AR, CP-GR, CP-HU, CP037, CP038, CP273, CP274, CP275, CP278, CP280,
　　CP281, CP282, CP284, CP285, CP290, CP297, CP367, CP420, CP423, CP424, CP437,
　　CP500, CP737, CP775, CP813, CP819, CP850, CP851, CP852, CP855, CP856, CP857,
　　CP860, CP861, CP862, CP863, CP864, CP865, CP866, CP866NAV, CP868, CP869,
　　CP870, CP871, CP874, CP875, CP880, CP891, CP903, CP904, CP905, CP912, CP915,
　　CP916, CP918, CP920, CP922, CP930, CP932, CP933, CP935, CP936, CP937, CP939,
　　CP949, CP950, CP1004, CP1026, CP1046, CP1047, CP1070, CP1079, CP1081, CP1084,
　　CP1089, CP1124, CP1125, CP1129, CP1132, CP1133, CP1160, CP1161, CP1162,
　　CP1163, CP1164, CP1250, CP1251, CP1252, CP1253, CP1254, CP1255, CP1256,
　　CP1257, CP1258, CP1361, CP10007, CPIBM861, CSA7-1, CSA7-2, CSASCII,
　　CSA_T500-1983, CSA_T500, CSA_Z243.4-1985-1, CSA_Z243.4-1985-2,
　　CSA_Z243.419851, CSA_Z243.419852, CSDECMCS, CSEBCDICATDE, CSEBCDICATDEA,
　　CSEBCDICCAFR, CSEBCDICDKNO, CSEBCDICDKNOA, CSEBCDICES, CSEBCDICESA,
　　CSEBCDICESS, CSEBCDICFISE, CSEBCDICFISEA, CSEBCDICFR, CSEBCDICIT, CSEBCDICPT,
　　CSEBCDICUK, CSEBCDICUS, CSEUCKR, CSEUCPKDFMTJAPANESE, CSGB2312, CSHPROMAN8,
　　CSIBM037, CSIBM038, CSIBM273, CSIBM274, CSIBM275, CSIBM277, CSIBM278,
　　CSIBM280, CSIBM281, CSIBM284, CSIBM285, CSIBM290, CSIBM297, CSIBM420,
　　CSIBM423, CSIBM424, CSIBM500, CSIBM851, CSIBM855, CSIBM856, CSIBM857,
　　CSIBM860, CSIBM863, CSIBM864, CSIBM865, CSIBM866, CSIBM868, CSIBM869,
　　CSIBM870, CSIBM871, CSIBM880, CSIBM891, CSIBM903, CSIBM904, CSIBM905,
　　CSIBM918, CSIBM922, CSIBM930, CSIBM932, CSIBM933, CSIBM935, CSIBM937,
　　CSIBM939, CSIBM943, CSIBM1026, CSIBM1124, CSIBM1129, CSIBM1132, CSIBM1133,
　　CSIBM1160, CSIBM1161, CSIBM1163, CSIBM1164, CSIBM11621162,
　　CSISO4UNITEDKINGDOM, CSISO10SWEDISH, CSISO11SWEDISHFORNAMES,
　　CSISO14JISC6220RO, CSISO15ITALIAN, CSISO16PORTUGESE, CSISO17SPANISH,
　　CSISO18GREEK7OLD, CSISO19LATINGREEK, CSISO21GERMAN, CSISO25FRENCH,
　　CSISO27LATINGREEK1, CSISO49INIS, CSISO50INIS8, CSISO51INISCYRILLIC,
　　CSISO58GB1988, CSISO60DANISHNORWEGIAN, CSISO60NORWEGIAN1, CSISO61NORWEGIAN2,
　　CSISO69FRENCH, CSISO84PORTUGUESE2, CSISO85SPANISH2, CSISO86HUNGARIAN,
　　CSISO88GREEK7, CSISO89ASMO449, CSISO90, CSISO92JISC62991984B, CSISO99NAPLPS,
　　CSISO103T618BIT, CSISO111ECMACYRILLIC, CSISO121CANADIAN1, CSISO122CANADIAN2,
　　CSISO139CSN369103, CSISO141JUSIB1002, CSISO143IECP271, CSISO150,
　　CSISO150GREEKCCITT, CSISO151CUBA, CSISO153GOST1976874, CSISO646DANISH,
　　CSISO2022CN, CSISO2022JP, CSISO2022JP2, CSISO2022KR, CSISO2033,
　　CSISO5427CYRILLIC, CSISO5427CYRILLIC1981, CSISO5428GREEK, CSISO10367BOX,
　　CSISOLATIN1, CSISOLATIN2, CSISOLATIN3, CSISOLATIN4, CSISOLATIN5, CSISOLATIN6,
　　CSISOLATINARABIC, CSISOLATINCYRILLIC, CSISOLATINGREEK, CSISOLATINHEBREW,
　　CSKOI8R, CSKSC5636, CSMACINTOSH, CSNATSDANO, CSNATSSEFI, CSN_369103,
　　CSPC8CODEPAGE437, CSPC775BALTIC, CSPC850MULTILINGUAL, CSPC862LATINHEBREW,
　　CSPCP852, CSSHIFTJIS, CSUCS4, CSUNICODE, CUBA, CWI-2, CWI, CYRILLIC, DE,
　　DEC-MCS, DEC, DECMCS, DIN_66003, DK, DS2089, DS_2089, E13B, EBCDIC-AT-DE-A,
　　EBCDIC-AT-DE, EBCDIC-BE, EBCDIC-BR, EBCDIC-CA-FR, EBCDIC-CP-AR1,
　　EBCDIC-CP-AR2, EBCDIC-CP-BE, EBCDIC-CP-CA, EBCDIC-CP-CH, EBCDIC-CP-DK,
　　EBCDIC-CP-ES, EBCDIC-CP-FI, EBCDIC-CP-FR, EBCDIC-CP-GB, EBCDIC-CP-GR,
　　EBCDIC-CP-HE, EBCDIC-CP-IS, EBCDIC-CP-IT, EBCDIC-CP-NL, EBCDIC-CP-NO,
　　EBCDIC-CP-ROECE, EBCDIC-CP-SE, EBCDIC-CP-TR, EBCDIC-CP-US, EBCDIC-CP-WT,
　　EBCDIC-CP-YU, EBCDIC-CYRILLIC, EBCDIC-DK-NO-A, EBCDIC-DK-NO, EBCDIC-ES-A,
　　EBCDIC-ES-S, EBCDIC-ES, EBCDIC-FI-SE-A, EBCDIC-FI-SE, EBCDIC-FR,
　　EBCDIC-GREEK, EBCDIC-INT, EBCDIC-INT1, EBCDIC-IS-FRISS, EBCDIC-IT,
　　EBCDIC-JP-E, EBCDIC-JP-KANA, EBCDIC-PT, EBCDIC-UK, EBCDIC-US, EBCDICATDE,
　　EBCDICATDEA, EBCDICCAFR, EBCDICDKNO, EBCDICDKNOA, EBCDICES, EBCDICESA,
　　EBCDICESS, EBCDICFISE, EBCDICFISEA, EBCDICFR, EBCDICISFRISS, EBCDICIT,
　　EBCDICPT, EBCDICUK, EBCDICUS, ECMA-114, ECMA-118, ECMA-128, ECMA-CYRILLIC,
　　ECMACYRILLIC, ELOT_928, ES, ES2, EUC-CN, EUC-JISX0213, EUC-JP, EUC-KR,
　　EUC-TW, EUCCN, EUCJP, EUCKR, EUCTW, FI, FR, GB, GB2312, GB13000, GB18030,
　　GBK, GB_1988-80, GB_198880, GEORGIAN-ACADEMY, GEORGIAN-PS, GOST_19768-74,
　　GOST_19768, GOST_1976874, GREEK-CCITT, GREEK, GREEK7-OLD, GREEK7, GREEK7OLD,
　　GREEK8, GREEKCCITT, HEBREW, HP-ROMAN8, HPROMAN8, HU, IBM-856, IBM-922,
　　IBM-930, IBM-932, IBM-933, IBM-935, IBM-937, IBM-939, IBM-943, IBM-1046,
　　IBM-1124, IBM-1129, IBM-1132, IBM-1133, IBM-1160, IBM-1161, IBM-1162,
　　IBM-1163, IBM-1164, IBM037, IBM038, IBM256, IBM273, IBM274, IBM275, IBM277,
　　IBM278, IBM280, IBM281, IBM284, IBM285, IBM290, IBM297, IBM367, IBM420,
　　IBM423, IBM424, IBM437, IBM500, IBM775, IBM813, IBM819, IBM848, IBM850,
　　IBM851, IBM852, IBM855, IBM856, IBM857, IBM860, IBM861, IBM862, IBM863,
　　IBM864, IBM865, IBM866, IBM866NAV, IBM868, IBM869, IBM870, IBM871, IBM874,
　　IBM875, IBM880, IBM891, IBM903, IBM904, IBM905, IBM912, IBM915, IBM916,
　　IBM918, IBM920, IBM922, IBM930, IBM932, IBM933, IBM935, IBM937, IBM939,
　　IBM943, IBM1004, IBM1026, IBM1046, IBM1047, IBM1089, IBM1124, IBM1129,
　　IBM1132, IBM1133, IBM1160, IBM1161, IBM1162, IBM1163, IBM1164, IEC_P27-1,
　　IEC_P271, INIS-8, INIS-CYRILLIC, INIS, INIS8, INISCYRILLIC, ISIRI-3342,
　　ISIRI3342, ISO-2022-CN-EXT, ISO-2022-CN, ISO-2022-JP-2, ISO-2022-JP-3,
　　ISO-2022-JP, ISO-2022-KR, ISO-8859-1, ISO-8859-2, ISO-8859-3, ISO-8859-4,
　　ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8, ISO-8859-9, ISO-8859-10,
　　ISO-8859-11, ISO-8859-13, ISO-8859-14, ISO-8859-15, ISO-8859-16, ISO-10646,
　　ISO-10646/UCS2, ISO-10646/UCS4, ISO-10646/UTF-8, ISO-10646/UTF8, ISO-CELTIC,
　　ISO-IR-4, ISO-IR-6, ISO-IR-8-1, ISO-IR-9-1, ISO-IR-10, ISO-IR-11, ISO-IR-14,
　　ISO-IR-15, ISO-IR-16, ISO-IR-17, ISO-IR-18, ISO-IR-19, ISO-IR-21, ISO-IR-25,
　　ISO-IR-27, ISO-IR-37, ISO-IR-49, ISO-IR-50, ISO-IR-51, ISO-IR-54, ISO-IR-55,
　　ISO-IR-57, ISO-IR-60, ISO-IR-61, ISO-IR-69, ISO-IR-84, ISO-IR-85, ISO-IR-86,
　　ISO-IR-88, ISO-IR-89, ISO-IR-90, ISO-IR-92, ISO-IR-98, ISO-IR-99, ISO-IR-100,
　　ISO-IR-101, ISO-IR-103, ISO-IR-109, ISO-IR-110, ISO-IR-111, ISO-IR-121,
　　ISO-IR-122, ISO-IR-126, ISO-IR-127, ISO-IR-138, ISO-IR-139, ISO-IR-141,
　　ISO-IR-143, ISO-IR-144, ISO-IR-148, ISO-IR-150, ISO-IR-151, ISO-IR-153,
　　ISO-IR-155, ISO-IR-156, ISO-IR-157, ISO-IR-166, ISO-IR-179, ISO-IR-193,
　　ISO-IR-197, ISO-IR-199, ISO-IR-203, ISO-IR-209, ISO-IR-226, ISO646-CA,
　　ISO646-CA2, ISO646-CN, ISO646-CU, ISO646-DE, ISO646-DK, ISO646-ES,
　　ISO646-ES2, ISO646-FI, ISO646-FR, ISO646-FR1, ISO646-GB, ISO646-HU,
　　ISO646-IT, ISO646-JP-OCR-B, ISO646-JP, ISO646-KR, ISO646-NO, ISO646-NO2,
　　ISO646-PT, ISO646-PT2, ISO646-SE, ISO646-SE2, ISO646-US, ISO646-YU,
　　ISO2022CN, ISO2022CNEXT, ISO2022JP, ISO2022JP2, ISO2022KR, ISO6937,
　　ISO8859-1, ISO8859-2, ISO8859-3, ISO8859-4, ISO8859-5, ISO8859-6, ISO8859-7,
　　ISO8859-8, ISO8859-9, ISO8859-10, ISO8859-11, ISO8859-13, ISO8859-14,
　　ISO8859-15, ISO8859-16, ISO88591, ISO88592, ISO88593, ISO88594, ISO88595,
　　ISO88596, ISO88597, ISO88598, ISO88599, ISO885910, ISO885911, ISO885913,
　　ISO885914, ISO885915, ISO885916, ISO_646.IRV:1991, ISO_2033-1983, ISO_2033,
　　ISO_5427-EXT, ISO_5427, ISO_5427:1981, ISO_5427EXT, ISO_5428, ISO_5428:1980,
　　ISO_6937-2, ISO_6937-2:1983, ISO_6937, ISO_6937:1992, ISO_8859-1,
　　ISO_8859-1:1987, ISO_8859-2, ISO_8859-2:1987, ISO_8859-3, ISO_8859-3:1988,
　　ISO_8859-4, ISO_8859-4:1988, ISO_8859-5, ISO_8859-5:1988, ISO_8859-6,
　　ISO_8859-6:1987, ISO_8859-7, ISO_8859-7:1987, ISO_8859-8, ISO_8859-8:1988,
　　ISO_8859-9, ISO_8859-9:1989, ISO_8859-10, ISO_8859-10:1992, ISO_8859-14,
　　ISO_8859-14:1998, ISO_8859-15:1998, ISO_9036, ISO_10367-BOX, ISO_10367BOX,
　　ISO_69372, IT, JIS_C6220-1969-RO, JIS_C6229-1984-B, JIS_C62201969RO,
　　JIS_C62291984B, JOHAB, JP-OCR-B, JP, JS, JUS_I.B1.002, KOI-7, KOI-8, KOI8-R,
　　KOI8-T, KOI8-U, KOI8, KOI8R, KOI8U, KSC5636, L1, L2, L3, L4, L5, L6, L7, L8,
　　L10, LATIN-GREEK-1, LATIN-GREEK, LATIN1, LATIN2, LATIN3, LATIN4, LATIN5,
　　LATIN6, LATIN7, LATIN8, LATIN10, LATINGREEK, LATINGREEK1, MAC-CYRILLIC,
　　MAC-IS, MAC-SAMI, MAC-UK, MAC, MACCYRILLIC, MACINTOSH, MACIS, MACUK,
　　MACUKRAINIAN, MS-ANSI, MS-ARAB, MS-CYRL, MS-EE, MS-GREEK, MS-HEBR,
　　MS-MAC-CYRILLIC, MS-TURK, MSCP949, MSCP1361, MSMACCYRILLIC, MSZ_7795.3,
　　MS_KANJI, NAPLPS, NATS-DANO, NATS-SEFI, NATSDANO, NATSSEFI, NC_NC0010,
　　NC_NC00-10, NC_NC00-10:81, NF_Z_62-010, NF_Z_62-010_(1973), NF_Z_62-010_1973,
　　NF_Z_62010, NF_Z_62010_1973, NO, NO2, NS_4551-1, NS_4551-2, NS_45511,
　　NS_45512, OS2LATIN1, OSF00010001, OSF00010002, OSF00010003, OSF00010004,
　　OSF00010005, OSF00010006, OSF00010007, OSF00010008, OSF00010009, OSF0001000A,
　　OSF00010020, OSF00010100, OSF00010101, OSF00010102, OSF00010104, OSF00010105,
　　OSF00010106, OSF00030010, OSF0004000A, OSF0005000A, OSF05010001, OSF100201A4,
　　OSF100201A8, OSF100201B5, OSF100201F4, OSF100203B5, OSF1002011C, OSF1002011D,
　　OSF1002035D, OSF1002035E, OSF1002035F, OSF1002036B, OSF1002037B, OSF10010001,
　　OSF10020025, OSF10020111, OSF10020115, OSF10020116, OSF10020118, OSF10020122,
　　OSF10020129, OSF10020352, OSF10020354, OSF10020357, OSF10020359, OSF10020360,
　　OSF10020364, OSF10020365, OSF10020366, OSF10020367, OSF10020370, OSF10020387,
　　OSF10020388, OSF10020396, OSF10020402, OSF10020417, PT, PT2, R8, ROMAN8,
　　RUSCII, SE, SE2, SEN_850200_B, SEN_850200_C, SHIFT-JIS, SHIFT_JIS,
　　SHIFT_JISX0213, SJIS, SS636127, ST_SEV_358-88, T.61-8BIT, T.61, T.618BIT,
　　TCVN-5712, TCVN, TCVN5712-1, TCVN5712-1:1993, TIS-620, TIS620-0,
　　TIS620.2529-1, TIS620.2533-0, TIS620, TS-5881, TSCII, UCS-2, UCS-2BE,
　　UCS-2LE, UCS-4, UCS-4BE, UCS-4LE, UCS2, UCS4, UHC, UJIS, UK, UNICODE,
　　UNICODEBIG, UNICODELITTLE, US-ASCII, US, UTF-7, UTF-8, UTF-16, UTF-16BE,
　　UTF-16LE, UTF-32, UTF-32BE, UTF-32LE, UTF7, UTF8, UTF16, UTF16BE, UTF16LE,
　　UTF32, UTF32BE, UTF32LE, VISCII, WCHAR_T, WIN-SAMI-2, WINBALTRIM,
　　WINDOWS-1250, WINDOWS-1251, WINDOWS-1252, WINDOWS-1253, WINDOWS-1254,
　　WINDOWS-1255, WINDOWS-1256, WINDOWS-1257, WINDOWS-1258, WINSAMI2, WS2, YU
　　指令：
　　#iconv -f GB2312 -t UTF-8 gb1.txt >gb2.txt　将gb1里的编码从GB2312转化成UTF-8 并重定向到gb2.txt
　　除了iconv命令，我们在linux系统下的man page的第三节还可以看到一组iconv函数。它们分别是
　　iconv_t iconv_open(const char *tocode, const char *fromcode);
　　size_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);
　　int iconv_close(iconv_t cd);
　　iconv_open函数用来打开一个编码转换的流，iconv函数的作用是实际进行转换，iconv_close函数的作用就是关闭这个流。实际用法参见下面的例子，下面是一个将UTF-8码转换成GBK码的例子，我们假设已经有了一个uft8编码的输入缓冲区inbuf以及这个缓冲区的长度inlen。
　　iconv_t cd = iconv_open( "GBK", "UTF-8");
　　char *outbuf = (char *)malloc(inlen * 4 );
　　bzero( outbiuf, inlen * 4);
　　char *in = inbuf;
　　char *out = outbuf;
　　size_t outlen = inlen *4;
　　iconv（cd, &in, (size_t *)&inlen, &out,&outlen）;
　　outlen = strlen(outbuf);
　　printf("%s\n",outbuf);
　　free(outbuf);
　　iconv_close(cd);
　　非常值得注意的地方是：iconv函数会修改参数in和参数out指针所指向的地方，也就是说，在调用iconv函数之前，我们的in和inbuf指针以及out和outbuf指针指向的是同一块内存区域，但是调用之后out指针所指向的地方就不是outbuf了，同理in指针。所以要
　　char *in = inbuf;
　　char *out = outbuf;
　　另存一下，使用或者释放内存的时候也要使用原先的那个指针outbuf和inbuf。 



GNU libiconv就是一个实现上述两种应用的转换库。

 

细节
本库提供了iconv（）的实现，应用于没有支持编码转换的系统。

 

支持以下编码方式：

 

l        欧洲语言

ASCII, ISO-8859-{1,2,3,4,5,7,9,10,13,14,15,16}, KOI8-R, KOI8-U, KOI8-RU, CP{1250,1251,1252,1253,1254,1257}, CP{850,866}, Mac{Roman,CentralEurope,Iceland,Croatian,Romania}, Mac{Cyrillic,Ukraine,Greek,Turkish}, Macintosh

l        犹太语言

ISO-8859-{6,8}, CP{1255,1256}, CP862, Mac{Hebrew,Arabic}

l        日语

EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP, ISO-2022-JP-2, ISO-2022-JP-1

l        中文

EUC-CN, HZ, GBK, CP936, GB18030, EUC-TW, BIG5, CP950, BIG5-HKSCS, BIG5-HKSCS:2001, BIG5-HKSCS:1999, ISO-2022-CN, ISO-2022-CN-EXT

l        韩语

EUC-KR, CP949, ISO-2022-KR, JOHAB

l        亚美尼亚语

ARMSCII-8

l        亚美尼亚语

Georgian-Academy, Georgian-PS

l        塔吉克语

KOI8-T

l        哈萨克语

PT154

l        泰国语

ISO-8859-11, TIS-620, CP874, MacThai

l        老挝语

MuleLao-1, CP1133

l        越南语

VISCII, TCVN, CP1258

l        特殊平台

HP-ROMAN8, NEXTSTEP

l        Full Unicode

UTF-8 
UCS-2, UCS-2BE, UCS-2LE 
UCS-4, UCS-4BE, UCS-4LE 
UTF-16, UTF-16BE, UTF-16LE 
UTF-32, UTF-32BE, UTF-32LE 
UTF-7 
C99, JAVA

l        Full Unicode, 按uint16_t/uint32_t (with machine dependent endianness and alignment)

UCS-2-INTERNAL, UCS-4-INTERNAL

l        Locale dependent, 按char/wchar_t (with machine dependent endianness and alignment, and with OS and locale dependent semantics)

char, wchar_t

 

名称为空的编码方式等同于“char”：表示依赖本地的字符编码。

 

 

如果配置了选项--enable-extra-encodings，还支持部分其它编码方式：

l        欧洲语言

CP{437,737,775,852,853,855,857,858,860,861,863,865,869,1125}

l        犹太语言

CP864

l        日语

EUC-JISX0213, Shift_JISX0213, ISO-2022-JP-3

l        中文

BIG5-2003 (experimental)

l        土库曼语

TDS565

l        特殊平台

ATARIST, RISCOS-LATIN1

 

通过与Unicode之间的转换，libiconv支持所有这些编码方式的任意转换。

 

安装
GNU包的常规安装：

$ ./configure --prefix=/usr/local$ make$ make install 

第一次安装libiconv库后，强烈建议你重新编译和重新安装gettext，使它能使用libiconv强大的功能。

 

在非GUN/Linux系统上，只有gettext在libiconv之前生成和安装，采用iconv的程序才能支持国际化。也就是说，首先安装libiconv，libiconv和gettext之间的循环依赖关系，可通过生成、安装任一包来解决。

顺序1：libiconv -> gettext -> libiconv，或

顺序2：gettext -> libiconv -> gettext（支持共享库的系统，AIX除外）

记住，第二次生成包时，你需要运行"make distclean"来清除第一次生成时留下的痕迹。

 

这个库的生成、安装有两种模式。

2       库模式（library mode）。可工作在所有系统上，使用库文件libiconv.so和头文件<iconv.h>（两个文件通过“make install”安装）

使用这种模式，只需简单地#include <iconv.h>，然后使用函数。

自动配置包方式（autoconfiguring package）使用这种模式：

如果不使用automake，将m4/iconv.m4附加到你的aclocal.m4文件中；
如果使用automake，将m4/iconv.m4添加到你的m4 macro repository；
运用占位符@LIBICONV@(使用libtool创建链接，则为@LTLIBICONV@)，将使用iconv函数的库文件和可执行文件添加到链接命令行中。如果使用automake，这些占位符的右边是*_LDADD。
注意，iconv.m4也是gettext包的一部分，安装在/usr/local/share/aclocal/iconv.m4。

 

2       libc的插入/重载模式（libc plug/override mode）。仅工作在GNU/Linux、Solaris和OSF/1系统上。是一种在没有glibc时来获取较好的iconv支持的途径。

这种模式安装库文件preloadable_libiconv.so，通过选项LD_PRELOAD，来重载所有C语言库中的iconv*函数。

GNU/Linux和Solaris系统：
$ export LD_PRELOAD=/usr/local/lib/preloadable_libiconv.so

OSF/1系统：
$ export _RLD_LIST=/usr/local/lib/preloadable_libiconv.so:DEFAULT

 

程序的代码不需要修改，甚至不需要重新编译，仅仅设置环境变量LD_PRELOAD即可。

 

下载libiconv
libiconv在GNU镜像站点 的子目录/pub/gnu/libiconv/找到。

通过其他途径获取libiconv，请阅读怎样获取GNU软件。

最新发布版本是 http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.11.tar.gz

iconv命令的用法。

$ iconv --list # 显示可识别的编码名称$ iconv -f GB2312 -t UTF-8 a.html > b.html # 转换GB2312编码的文件a.html为UTF-8编码，存入b.html$ iconv -f GB2312 -t BIG5 a.html > b.html # 转换GB2312编码的文件a.html为BIG5编码，存入b.htmliconv编程涉及到以下glibc库的调用：

#include <iconv.h>iconv_t iconv_open(const char *tocode, const char *fromcode);int iconv_close(iconv_t cd);size_t iconv(iconv_t cd,char **inbuf, size_t *inbytesleft,char **outbuf, size_t *outbytesleft);在使用iconv转码的时候，首先用iconv_open获取转码句柄，然后调用iconv转码，转完了后调用iconv_close关闭句柄。    iconv函数中：参数cd是用iconv_open调用返回的转码句柄；
参数inbuf指向需要转码的缓冲区；
参数inbytesleft是inbuf所保存的需要转码的字节数；
参数outbuf存放转码结果；
参数outbytesleft存放outbuf空间的大小。

如果调用成功，iconv返回转换的字节数（不可逆转调用的字节数，可逆转调用的字节数不包括在内）。否则返回-1，并设置相应的errno。
iconv逐步扫描inbuf，每转换一个字符，就增加inbuf，减少inbytesleft，并将结果存入outbuf，结果字节数存入outbytesleft。遇到下列情况将停止扫描并返回：

1. 多字节序列无效，这时候errno为EILSEQ，*inbuf指向第一个无效的字符；
2. 有字节留在inbuf尚未转换，errno为EINVAL;
3. outbuf空间不够，errno为E2BIG；
4. 正常转换完备。

对于iconv函数，还有两种调用情况：

1. inbuf或者*inbuf为NULL，outbuf和*outbuf不为NULL，iconv会设置转换状态为初始状态，并保存转换序列到*outbuf。如果outbuf空间不足，errno会设置为E2BIG，返回(size_t)(-1)；
2. inbuf或者*inbuf为NULL，outbuf或者*outbuf也为NULL，iconv设置转换状态为初始状态。

iconv命令的使用固然方便，可是如果转换过程中如果遇到问题则会停止转换，有时候我们希望跳过不能转换的字节序列继续转换。以下的一段程序能实现这种功能。

/** 
* siconv.cpp - A simple way to demostrate the usage of iconv calling
*
* Report bugs to marchday2004@yahoo.com.cn
* July 15th, 2006
*/
#include <iconv.h>
#include <stdio.h>
#include <string>
#include <stdarg.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/mman.h>

#ifdef DEBUG
#define TRACE(fmt, args...) fprintf(stderr, "%s:%s:%d:"fmt, \
__FILE__, __FUNCTION__, __LINE__, ##args)
#else
#define TRACE(fmt, args...)
#endif

#define CONVBUF_SIZE 32767

extern int errno;

void print_err(const char *fmt, ...)
{
 va_list ap;
 
 va_start(ap, fmt);
 vfprintf(stderr, fmt, ap);
 va_end(ap);
}

int print_out(const char* buf, size_t num)
{
 if (num != fwrite(buf, 1, num, stdout)) {
  return -1;
 }
 
 return 0;
}

void print_usage() {
 
 print_err("Usage: siconv -f encoding -t encoding [-c] "
  "input-file\n");
}

int iconv_string(const char *from, const char *to, 
     const char *src, size_t len, 
     ::std::string& result, 
     int c = 0, size_t buf_size = 512)
{
 iconv_t cd;
 
 char *pinbuf = const_cast< char* >(src);
 size_t inbytesleft = len;
 char *poutbuf = NULL;
 size_t outbytesleft = buf_size;
 
 char *dst = NULL;
 size_t retbytes = 0;
 int done = 0;
 int errno_save = 0;
 
 if ((iconv_t)-1 == (cd = iconv_open(to, from))) {
  return -1;
 }
 
 dst = new char[buf_size];
 
 while(inbytesleft > 0 && !done)  {
  poutbuf = dst;
  outbytesleft = buf_size;
  
  TRACE("TARGET - in:%p pin:%p left:%d\n", src, pinbuf, inbytesleft);
  retbytes = iconv(cd, &pinbuf, &inbytesleft, &poutbuf, &outbytesleft);
  errno_save = errno;
  
  if (dst != poutbuf)  {// we have something to write
   TRACE("OK - in:%p pin:%p left:%d done:%d buf:%d\n", 
    src, pinbuf, inbytesleft, pinbuf-src, poutbuf-dst);
   result.append(dst, poutbuf-dst);
  } 
  
  if (retbytes != (size_t)-1) {
   poutbuf = dst;
   outbytesleft = buf_size;
   (void)iconv(cd, NULL, NULL, &poutbuf, &outbytesleft);
   
   if (dst != poutbuf) {// we have something to write
     TRACE("OK - in:%p pin:%p left:%d done:%d buf:%d\n", 
     src, pinbuf, inbytesleft, pinbuf-src, poutbuf-dst);
    result.append(dst, poutbuf-dst);
   }
   
   errno_save = 0;
   break;
  }
  
  
  TRACE("FAIL - in:%p pin:%p left:%d done:%d buf:%d\n", 
   src, pinbuf, inbytesleft, pinbuf-src, poutbuf-dst);
  
  switch(errno_save)  {
  case E2BIG:
   TRACE("E E2BIG\n");
   break;
  case EILSEQ:
   TRACE("E EILSEQ\n");
   if (c) {
    errno_save = 0;
    inbytesleft = len-(pinbuf-src); // forward one illegal byte
    inbytesleft--;
    pinbuf++;
    break;
   }
   
   done = 1;
   break;
  case EINVAL:
   TRACE("E EINVAL\n");
   done = 1;
   break;
  default:
   TRACE("E Unknown:[%d]%s\n", errno, strerror(errno));
   done = 1;
   break; 
  }
  
 }
 
 delete[] dst;
 iconv_close(cd);
 
 errno = errno_save;
 return (errno_save) ? -1 : 0;
}

int conv_file_fd(const char* from, const char *to, int fd, 
     ::std::string& result, int c)
{
 struct stat st;
 void *start;
 
 if (0 != fstat(fd, &st)) {
  return -1;
 }
 
 start = mmap(NULL, st.st_size, PROT_READ, MAP_SHARED, fd, 0);
 
 if (MAP_FAILED == start) {
  return -1;
 } 
 
 if (iconv_string(from, to, (char*)start, 
  st.st_size, result, c, CONVBUF_SIZE) < 0) {
  int errno_save = errno;
  munmap(start, st.st_size);
  TRACE("\n");
  errno = errno_save;
  return -1;
 }
 
 munmap(start, st.st_size);
 return 0;
}

int conv_file(const char* from, const char* to, 
     const char* filename, int c)
{
 ::std::string result;
 FILE *fp;
 
 if (NULL == (fp=fopen(filename, "rb"))) {
  print_err("open file %s:[%d]%s\n", filename, 
   errno, strerror(errno));
  return -1;
 }
 
 if (conv_file_fd(from, to, fileno(fp), result, c) < 0)  {
  print_err("conv file fd:[%d]%s\n", errno, strerror(errno));
  fclose(fp);
  return -1;
 }
 
 print_out(result.data(), result.size());
 fclose(fp);
 return 0;
}

int main(int argc, char *argv[])
{
#ifdef TESTCASE
 ::std::string strA = "欢迎(welcome ^_^)来到(to)首都北京。";
 ::std::string strB = "大喊一声：We are chinese <=> 我们都是中国人。";
 
 ::std::string strC = strA.substr(0, 20) + strB.substr(0, 41);
 ::std::string result;
 if (iconv_string("GBK", "UTF-8", strC.data(), strC.size(), result, 1) < 0)
 {
  TRACE("ERROR [%d]%s\n", errno, strerror(errno));
 }
 
 TRACE("CONVERSION RESULT:");
 result.append("\n");
 print_out(result.data(), result.size());
 
 return 0;
#else
 ::std::string from, to;
 ::std::string input_file;
 int o;
 int c = 0;
 
 while (-1 != (c = getopt(argc, argv, "f:t:c")))
 {
  switch(c) {
  case 'f':
   from = optarg;
   break;
  case 't':
   to = optarg;
   break;
  case 'c':
   c = 1;
   break;
  default:
   return -1;
  }
 }
 
 if (from.empty() || to.empty() || optind != (argc-1))
 {
  print_usage();
  return -1;
 }
 
 input_file = argv[optind++];
 
 return conv_file(from.c_str(), to.c_str(), 
  input_file.c_str(), c);
#endif
}


可以用内存映像文件解决文件太大内存缓冲不够的情况。相对于iconv命令，加-c选项，以忽略转换过程中可能引发的问题。

$ g++ -o siconv siconv.cpp如果在命令行加了-DDEBUG选项，会编译进调试语句，如果加了-DTESTCASE选项，则仅会编译对iconv_string函数测试的情况。
用了一段时间libiconv和gettext，这里做下总结，并对两个包的下载资源做个收藏。

libiconv和gettext的功能
libiconv和gettext是GNU发布的用于i18n（国际化）字符支持的开发/工具包。libiconv用于在多种字符集之间进行字符编码转换，而gettext常用于开发多locale支持程序，它以资源文件方式（例如：.pot、.po、.mo文件）使程序支持多种字符编码输出。
在开发i18n支持程序时，通常是libiconv和gettext配合使用，gettext在其下层也是依靠libiconv实现的。gettext对于开发i18n程序是一个福音，它使程序中的i18n字符编码支持，和应用程序自身的开发分离开，这种分离可以让对应用程序的i18n支持变得很异步。
在开源领域和Linux平台下，很多有名甚至大块头的软件都基于libiconv和gettext，比如svn、wxWidgets。另外，很多其它语言程序的i18n特性，也都依靠libiconv和gettext实现，比如PHP。
一个典型i18n支持应用，使用gettext开发方式例子
一个以西欧编码（ISO-8859-1）字符为基础的应用程序，只要公布它的gettext字符串定义模板资源.pot（Portable Object Template）文件，或英文的字符串定义资源.po（Portable Object）文件，那么世界各地的开发者或爱好者都可以对其程序中使用的字符编码进行本地化转换（只要这个地区的字符编码规范包括在libiconv支持的字符集内），并且这些翻译者完全不需要了解应用程序自身的逻辑甚至编程技术，他们做的只是用文本编辑器或其它gettext辅助工具（例如：PoEdit）翻译.pot、.po中的文本而已。如果程序设计地好，甚至不需要重新编译生成程序，只需要改变一下程序的运行环境或设置（比如：改变POSIX标准的locale相关环境变量），就可以让程序输出对应的字符编码。
最后是显示/呈现这些字符编码的问题了。实际上应用程序的字符显示功能并不由应用程序自身做主，字符的显示和下层的机制有关，有两个：

字符显示和开发程序使用的库、运行环境的字符集支持有关。对于GUI程序，就是Windows SDK、MFC、wxWidgets、Qt、GTK等库支持的字符集；对于CUI程序（字符界面、命令行、控制台程序），通常用到标准库/RT库，则和标准库/RT库的实现有关，而CUI程序的下层运行环境通常是终端，所以和终端的字符集支持也有关系。
系统安装的字体，以及系统、库运行环境的字体配置。

libiconv和gettext包的Windows版
libiconv和gettext在Linux下属于常规的开发、工具包，大多数Linux发行版下都能下载到方便使用的预编译包，这两个包中都包括：用于开发的库文件、和独立运行的工具程序。它们的GNU主页分别是：
libiconv主页
gettext主页
从 gettext 0.13 和 libiconv 1.9 开始，GNU发布的源码包版本就已经支持Windows平台了，并用 woe32 标识是Windows平台特定的文件，编译生成指导可以参考包中的 README.woe32 文件。但是 libiconv 1.13.1 中已经将 VC 的 nmake 生成功能去除掉了，并在 README.woe32 中说以后不再支持 nmake 了，只支持 MinGW 和 Cygwin 开发环境，并推荐使用 Cygwin。
gettext 0.14.6 是支持 VC 和 nmake 的（支持最高到 VC 7），但 gettext 是依赖 libiconv 的。
另外在Windows下，已经有很多项目将libiconv和gettext移植到其下，其中 gettext for Win32 是较早的一个项目。
所以如果嫌自己编译麻烦的话，就直接下载gettext for Win32上的预编译包好了。gettext for Win32项目很久没有更新了：项目主页最近一次更新是 2004-01-31，下载包最近一次更新是 2004-01-21，版本分别是：
libiconv-1.9.1.bin.woe32.zip
gettext-tools-0.13.1.bin.woe32.zip
gettext-runtime-0.13.1.bin.woe32.zip
下载后，3个包解压到同一个目录即可。解压后的目录中，bin 下有工具程序、动态库，include 下有头文件，lib 下有导入库/静态库，share 的 doc 和 man 下分别有文档和手册说明。
注意：
gettext for Win32 的 libiconv 和 gettext 移植版链接到Windows随机附带的CRT库 msvcrt.dll 上，而 iconv 中的函数会使用标准库中的全局 errno 来表示错误状态，在 msvcrt.dll 的标准库实现中，将 errno 实现为一个导出的内存访问函数，真正的 errno 值保存在那个内存位置上。如果用户程序不链接到 msvcrt.dll 上，则需要手工导入 errno 来取得 iconv 的错误状态。

最近在整合 libiconv，希望能够解决一些跨平台[1]文字转码的问题。程式写得很高兴，结果移到 Windows 上一执行，却不能执行，检查的结果，是不支援 WCHAR_T，尝试改转成 UCS-2LE 或是 UTF-16LE，虽然可以转，但有些字还是会烂掉。经过追查的结果发现，一切都是版本的问题。


对於曾经体验过 GNU、Linux 以及其他 Open Source 软体的好处的人来说，如果能够也在 Windows 平台上，使用这些工具，那可真是一大乐事，多少能够让 Windows 变得稍微好用一些。因此，一直以来，这些 open source 软体，不断有官方或非官方的人或组织，在进行着 windows porting 的工作。大喀的有 Cygwin/MingGW，小喀的也有 UnxUtils 这类计画存在[2]。而在 libiconv 的官方网站里，也可以下载的到一个叫做 libiconv-1.9.1.bin.woe32.zip 的特别版本，将这个版本解开後，通常是放到 C:\usr 下，设定好 PATH 环境变数，即可使用。这正是原本我在 Windows 上使用的 libiconv 版本。


但今天却发现，这个 1.9.1-woe32 的版本，compile/link 程式都没有问题，但就是没有 WCHAR_T，也会让 UCS-2LE 或 UTF-16LE 的某些字烂掉。测了一下从 google 找到的几个 libiconv for windows implementation，发现 GnuWin32 所提供的 libiconv，并没有这个问题。换用了这个版本，跑一遍所有的 test case，这才很高兴地确认，这一版，才是对的。


观察了一下 GnuWin32，发现这是目前我所找到的，比较好的 GNU/OpenSource on Win32 的 solution。其一，皆是 native porting，不必像 Cygwin 那样拖着一个大大的 unix emulation layer；其二，包装的比较完整，除了各个 package 有 installer 之外，也皆按照 Windows 的习惯，统一安装到 C:\Program Files\GnuWin32 目录下，并形成完整的 UNIX 目录结构，而且，对 DLLs 按右键看内容，也都有完整的版权与版本资讯。换句话说，GnuWin32「看起来」比较像个「正式的」GNU win32 solution。


所以，用这版的就对了啦！只可惜最後我还是找不到方法，在 compile-time、link-time 甚至在 run-time 检查使用 libiconv 版本是否正确。不过，既然因为 LGPL 的限制，不好直接附在我们的软体里散布，而必须另外安装，也只有期待，使用我们的软体的人，能够乖乖地看说明书办事了。


这里的「平台」一词，指的是 compiler，而不是 OS。这故事说来话长，但还是 Microsoft 的错就是了。 ?
我目前的工作环境里，使用的是 MinGW + UnxUtils + Official TCSH/win32 的组合。我不喜欢 Cygwin 的庞大，MinGW 的轻量倒还不错。另外，TCSH/win32 在 2005 年六月还抓的到，但刚刚我试的结果，该目录已经找不到了，有需要的人，请各显神通吧。
    libiconv库是一个基于GNU协议的开源库，主要是解决多语言编码处理转换等应用问题。
    怎样学习使用libiconv库？对于刚接触到人来说，这篇文章不妨去看一看，若已经用到过该库的人，在应用的过程中可能遇到一些问题，我们可以一起来探讨，我的联系方式是 cnangel@gmail.com 。




