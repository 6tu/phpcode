用openssl处理smime.p7m文件，使其成为普通邮件2008-08-19 19:18使用Outlook Express发送的安全邮件会有smime.p7m这个文件，p7m格式文件是带签名的加密文件，一般在签名和加密之前进行了base64编码。当拿到这个文件不能用Outlook Express处理，尽管它与Outlook Express有关系，作个测试，用到了openssl和base64。

首先用openssl解密smime.p7m ，openssl命令如下:

openssl smime -decrypt -inform DER -in smime.p7m -inkey pkcs12.key -recip pkcs12.crt -out test.eml

其中pkcs12.key和pkcs12.crt密钥对，test.eml是解密后输出的文件，用记事本打开test.eml，文件头的“smime-type=signed-data”说明这个文件是含有签名的数据。现在就可以使用Outlook Express打开test.eml文件了，如果提前导入了pkcs12的根证书ca.crt,哪么Outlook Express不会报错，如果没有，Outlook Express不会报错但不影响阅读

但是如果就此结束，就没有什么玩了，我还是继续

删除test.eml文件的前面几行，就是这些内容，

Content-Type: application/x-pkcs7-mime; name=smime.p7m; smime-type=signed-data
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=smime.p7m

保存成 test2.txt ，然后用base64解码 ，base64 -d test2.txt test2.eml ，test2.eml在Outlook Express中就没有了“数字签名邮件”的提示，如果把test2.eml文件中的base64编码后的内容（中间整齐的部分）再进行base64解码，那就得到了smime.p7m文件中原来的附件 ，base64 -d test3.txt test.rar

这样，经过openssl解密和两次base64解码就看到了原来的附件，不需要Outlook Express就看到了原来的附件



其实在openssl解密之后，再用openssl移除签名更方便一些，根证书ca.crt在keys下，pkcs12.crt就是ca.crt颁发的。执行命令

openssl smime -verify -outform PEM -in test.eml -CAfile keys/ca.crt -signer pkcs12.crt -out test10.eml

这个test10.eml就是用Outlook Express发送的没有带签名和加密的邮件，可以说是完美的普通邮件，文件中的

X-Mailer: Microsoft Outlook Express 6.00.2900.3138

这行表明是 Outlook Express 发送的邮件，中间的比较整齐的部分就是用base64 编码后的附件内容，使用base64解码那些内容，会得到原来的附件

base64.exe 是专门进行base64编码和解码的，openssl也有这个作用，下面转一篇关于openssl进行BASE64编码解码的文章

源 http://blog.csdn.net/jasonhwang/archive/2008/04/27/2336049.aspx

本文介绍了openssl的几个实用命令，利用openssl进行BASE64编码解码、md5/sha1摘要、AES/DES3加密解密。

一. 利用openssl命令进行BASE64编码解码（base64 encode/decode） 
    1. BASE64编码命令
       对字符串‘abc’进行base64编码：
           # echo abc | openssl base64
           YWJjCg== （编码结果）

       如果对一个文件进行base64编码（文件名t.txt）：
           # openssl base64 -in t.txt

    2. BASE64解码命令
       求base64后的字符串‘YWJjCg==’的原文：
           # echo YWJjCg== | openssl base64 -d
           abc   （解码结果）

       如果对一个文件进行base64解码（文件名t.base64）：
           # openssl base64 -d -in t.base64


二. 利用openssl命令进行md5/sha1摘要（digest） 
    1. 对字符串‘abc’进行md5摘要计算：echo abc | openssl md5 
       若对某文件进行md5摘要计算：openssl md5 -in t.txt

    2. 对字符串‘abc’进行sha1摘要计算：echo abc | openssl sha1
       若对某文件进行sha1摘要计算：openssl sha1 -in t.txt


三. 利用openssl命令进行AES/DES3加密解密（AES/DES3 encrypt/decrypt）

     对字符串‘abc’进行aes加密，使用密钥123，输出结果以base64编码格式给出：
        # echo abc | openssl aes-128-cbc -k 123 -base64
        U2FsdGVkX18ynIbzARm15nG/JA2dhN4mtiotwD7jt4g=   （结果）

     对以上结果进行解密处理：
        # echo U2FsdGVkX18ynIbzARm15nG/JA2dhN4mtiotwD7jt4g= | openssl aes-128-cbc -d -k 123 -base64
        abc （结果）

     若要从文件里取原文（密文）进行加密（解密），只要指定 -in 参数指向文件名就可以了。

     进行des3加解密，只要把命令中的aes-128-cbc换成des3就可以了。
 
